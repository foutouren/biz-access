<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">  
	   <property name="driverClass" value="${jdbc.driver}" />  
	   <property name="jdbcUrl" value="${jdbc.url}" />  
	   <property name="username" value="${jdbc.username}"/>  
	   <property name="password" value="${jdbc.password}"/>  
	   <property name="idleConnectionTestPeriodInMinutes" value="1"/>  
	   <property name="idleMaxAgeInMinutes" value="5"/>
	   <property name="maxConnectionsPerPartition" value="${pool.maxPoolSize}"/>  
	   <property name="minConnectionsPerPartition" value="${pool.minPoolSize}"/>  
	   <property name="partitionCount" value="2"/>
	   <property name="connectionTestStatement" value="SELECT 1"/>
	   <property name="acquireIncrement" value="${pool.acquireIncrement}"/>  
	   <property name="statementsCacheSize" value="0"/>  
	   <property name="releaseHelperThreads" value="5"/>  
	   <property name="connectionTimeoutInMs" value="5000"/>  
	</bean>  

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mappingLocations">             
			<list>
				<value>classpath*:com/glsx/biz/access/entity/*.hbm.xml</value>
			</list>         
		</property>
		<property name="packagesToScan">
		    <list>
		        <value>com.glsx.biz.access.common.entity</value>
		    </list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>
				<prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
				<prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<prop key="hibernate.bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}</prop>
				<!-- 
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}</prop>
				<prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
				<prop key="hibernate.current_session_context_class">thread</prop>
				 -->
			</props>
		</property>
	</bean>
	

	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true" />

	<!-- 开启注解事务 只对当前配置文件有效 -->
	<tx:annotation-driven transaction-manager="txManager" />

	<bean id="txManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<tx:advice id="txAdvice" transaction-manager="txManager">  
	    <tx:attributes>  
	        <tx:method name="save*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="create*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="merge*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="del*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="edit*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="put*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="register*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="active*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="report*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="bind*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="unbind*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="batch*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="syn*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="gain*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="fill*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="audit*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="send*" propagation="REQUIRED"/>
			<tx:method name="checkRandomPassword" propagation="REQUIRED"/>
			<tx:method name="receive*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
			<tx:method name="enable*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
            <tx:method name="disable*" propagation="REQUIRED" rollback-for="com.glsx.cloudframework.exception.ServiceException"/>
            
			<!-- hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到  -->
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="user*" propagation="REQUIRED" read-only="true" />
			<tx:method name="updateLogin" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" read-only="true" />
	    </tx:attributes>  
	</tx:advice>  
	      
	<aop:config>  
	    <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.glsx.biz.access.container.service..*(..))"/>
	</aop:config> 
	
	<bean id="hibernateBaseDAO"
		class="com.glsx.biz.access.container.dao.base.HibernateBaseDAO">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>	
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
	
</beans>